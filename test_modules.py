"""
Script de Testes - VALIDA√á√ÉO DOS M√ìDULOS
=========================================
Use este script para testar cada m√≥dulo individualmente ANTES de rodar o bot completo.

Uso:
    python test_modules.py
"""

import json
import time
from pathlib import Path

# Imports dos m√≥dulos
from modules.screen import ScreenCapture
from modules.detection import BattleDetector, PokemonIdentifier, SpriteComparator
from modules.controls import GameController
from modules.visualizer import BoundingBoxVisualizer


def load_config():
    """Carrega config.json"""
    with open('config.json', 'r') as f:
        return json.load(f)


def test_screen_capture():
    """Teste 1: Captura de Tela"""
    print("\n" + "=" * 60)
    print("TESTE 1: CAPTURA DE TELA")
    print("=" * 60)

    config = load_config()
    screen = ScreenCapture(config)

    # Valida regi√µes
    if not screen.validate_regions():
        print("\n‚ö†Ô∏è  Ajuste as coordenadas no config.json antes de continuar!")
        return False

    # Testa captura de cada regi√£o
    print("\nCapturando todas as regi√µes...")
    regions = screen.get_all_regions()

    for name, img in regions.items():
        if img:
            filename = f"debug/test_region_{name}.png"
            screen.save_screenshot(img, filename)

    print("\n‚úÖ Teste de captura conclu√≠do!")
    print("   Verifique as imagens em debug/test_region_*.png")
    return True


def test_visualization():
    """Teste 2: Visualiza√ß√£o com Bounding Boxes"""
    print("\n" + "=" * 60)
    print("TESTE 2: VISUALIZA√á√ÉO")
    print("=" * 60)
    print("\nAbrindo janela de visualiza√ß√£o por 10 segundos...")
    print("Verifique se as bounding boxes est√£o nas posi√ß√µes corretas!")

    config = load_config()
    screen = ScreenCapture(config)
    visualizer = BoundingBoxVisualizer(config, screen)

    # Inicia visualiza√ß√£o
    visualizer.start()

    # Aguarda 10 segundos
    for i in range(10, 0, -1):
        print(f"Fechando em {i}s... (ou pressione 'q' na janela)", end='\r')
        time.sleep(1)
        if not visualizer.running:
            break

    visualizer.stop()
    print("\n‚úÖ Teste de visualiza√ß√£o conclu√≠do!")
    return True


def test_battle_detection():
    """Teste 3: Detec√ß√£o de Batalha"""
    print("\n" + "=" * 60)
    print("TESTE 3: DETEC√á√ÉO DE BATALHA")
    print("=" * 60)

    config = load_config()
    screen = ScreenCapture(config)
    detector = BattleDetector(config, screen)

    print("\nTestando detec√ß√£o por 10 segundos...")
    print("Inicie uma batalha no jogo para testar!")

    for i in range(50):  # 10 segundos (0.2s cada)
        in_battle = detector.is_in_battle()
        status = "üî¥ BATALHA" if in_battle else "üü¢ Farm"
        print(f"{status}", end='\r')
        time.sleep(0.2)

    print("\n‚úÖ Teste de detec√ß√£o conclu√≠do!")
    return True


def test_ocr():
    """Teste 4: OCR do Nome"""
    print("\n" + "=" * 60)
    print("TESTE 4: OCR DO NOME DO POK√âMON")
    print("=" * 60)

    config = load_config()
    screen = ScreenCapture(config)
    identifier = PokemonIdentifier(config, screen)

    print("\nInicie uma batalha e aguarde 3 segundos...")
    time.sleep(3)

    print("Tentando extrair nome do Pok√©mon...")
    name = identifier.get_pokemon_name()

    if name:
        print(f"\n‚úÖ Nome detectado: '{name.upper()}'")
    else:
        print("\n‚ùå N√£o conseguiu detectar o nome")
        print("   Verifique se:")
        print("   - Est√° em uma batalha")
        print("   - As coordenadas da regi√£o 'pokemon_name' est√£o corretas")
        print("   - O Tesseract est√° instalado corretamente")

    return name is not None


def test_sprite_comparison():
    """Teste 5: Compara√ß√£o de Sprites"""
    print("\n" + "=" * 60)
    print("TESTE 5: COMPARA√á√ÉO DE SPRITES")
    print("=" * 60)

    config = load_config()
    screen = ScreenCapture(config)
    comparator = SpriteComparator(config, screen)

    # Verifica se h√° sprites base
    sprite_dir = Path("assets/base_sprites")
    sprites = list(sprite_dir.glob("*.png"))

    if not sprites:
        print("\n‚ùå Nenhum sprite base encontrado em assets/base_sprites/")
        print("   Adicione pelo menos um sprite base para testar!")
        return False

    print(f"\nSprites base encontrados: {len(sprites)}")
    for sprite in sprites:
        print(f"  - {sprite.stem}")

    # Testa com primeiro sprite
    test_pokemon = sprites[0].stem
    print(f"\nTestando compara√ß√£o com '{test_pokemon}'...")
    print("Inicie uma batalha com este Pok√©mon em 3 segundos...")
    time.sleep(3)

    is_skin, difference = comparator.is_pokemon_skinned(test_pokemon)

    print(f"\nResultado:")
    print(f"  - Diferen√ßa: {difference:.2f}")
    print(f"  - Threshold: {comparator.hash_threshold}")
    print(f"  - √â skin? {'SIM ‚ú®' if is_skin else 'N√ÉO'}")

    # Salva compara√ß√£o visual
    comparator.save_comparison_debug(test_pokemon, difference)

    print("\n‚úÖ Teste de compara√ß√£o conclu√≠do!")
    print("   Verifique debug/comparison_*.png para ver a compara√ß√£o visual")
    return True


def test_controls():
    """Teste 6: Controles"""
    print("\n" + "=" * 60)
    print("TESTE 6: CONTROLES")
    print("=" * 60)

    config = load_config()
    controller = GameController(config)

    print("\nFoque na janela do jogo em 3 segundos...")
    time.sleep(3)

    print("\nTestando movimento...")
    controller.move_between_tiles()

    print("\nTestando fuga (se estiver em batalha)...")
    controller.flee_battle()

    print("\n‚úÖ Teste de controles conclu√≠do!")
    print("   Verifique se os comandos foram executados corretamente")
    return True


def run_all_tests():
    """Executa todos os testes em sequ√™ncia"""
    print("=" * 60)
    print("POKEMON BOT - SUITE DE TESTES")
    print("=" * 60)
    print("\nEsta suite vai testar todos os m√≥dulos implementados.")
    print("Siga as instru√ß√µes de cada teste.\n")

    input("Pressione ENTER para come√ßar...")

    # Cria diret√≥rios necess√°rios
    Path("debug").mkdir(exist_ok=True)
    Path("assets/base_sprites").mkdir(parents=True, exist_ok=True)

    tests = [
        ("Captura de Tela", test_screen_capture),
        ("Visualiza√ß√£o", test_visualization),
        ("Detec√ß√£o de Batalha", test_battle_detection),
        ("OCR", test_ocr),
        ("Compara√ß√£o de Sprites", test_sprite_comparison),
        ("Controles", test_controls),
    ]

    results = {}

    for test_name, test_func in tests:
        try:
            results[test_name] = test_func()
        except KeyboardInterrupt:
            print("\n\nTestes interrompidos pelo usu√°rio")
            break
        except Exception as e:
            print(f"\n‚ùå Erro no teste '{test_name}': {e}")
            results[test_name] = False

        # Pausa entre testes
        if test_name != tests[-1][0]:
            input("\nPressione ENTER para pr√≥ximo teste...")

    # Resumo final
    print("\n" + "=" * 60)
    print("RESUMO DOS TESTES")
    print("=" * 60)

    for test_name, passed in results.items():
        status = "‚úÖ PASSOU" if passed else "‚ùå FALHOU"
        print(f"{status} - {test_name}")

    passed_count = sum(1 for p in results.values() if p)
    total_count = len(results)

    print(f"\nTotal: {passed_count}/{total_count} testes passaram")

    if passed_count == total_count:
        print("\nüéâ Todos os testes passaram! O bot est√° pronto para uso.")
    else:
        print("\n‚ö†Ô∏è  Alguns testes falharam. Revise as configura√ß√µes.")


def interactive_menu():
    """Menu interativo para escolher testes"""
    while True:
        print("\n" + "=" * 60)
        print("MENU DE TESTES")
        print("=" * 60)
        print("\n1. Testar Captura de Tela")
        print("2. Testar Visualiza√ß√£o")
        print("3. Testar Detec√ß√£o de Batalha")
        print("4. Testar OCR")
        print("5. Testar Compara√ß√£o de Sprites")
        print("6. Testar Controles")
        print("7. Executar TODOS os testes")
        print("0. Sair")

        choice = input("\nEscolha uma op√ß√£o: ")

        tests = {
            '1': test_screen_capture,
            '2': test_visualization,
            '3': test_battle_detection,
            '4': test_ocr,
            '5': test_sprite_comparison,
            '6': test_controls,
            '7': run_all_tests,
        }

        if choice == '0':
            print("\nEncerrando...")
            break
        elif choice in tests:
            try:
                tests[choice]()
            except KeyboardInterrupt:
                print("\n\nTeste interrompido")
            except Exception as e:
                print(f"\n‚ùå Erro: {e}")
        else:
            print("\n‚ùå Op√ß√£o inv√°lida!")


if __name__ == "__main__":
    """
    Ponto de entrada do script de testes.

    Uso:
        python test_modules.py           # Menu interativo
        python test_modules.py --all     # Executa todos os testes
    """
    import sys

    if '--all' in sys.argv:
        run_all_tests()
    else:
        interactive_menu()